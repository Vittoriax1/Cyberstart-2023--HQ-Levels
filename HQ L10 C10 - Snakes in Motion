# Here is the modified Python script for L10 C10 for the Headquarters Level

from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import base64

BLOCK_SIZE = 32
PADDING = b'{'

# Encrypted text to decrypt
encrypted = "uqX82PBZ8pi1fvt4GLHYgLs50ht8OQlrR1KHL2teppQ="

def decode_aes(key, e):
    cipher = Cipher(algorithms.AES(key), modes.ECB(), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted = decryptor.update(base64.b64decode(e)) + decryptor.finalize()
    return decrypted.decode('latin-1').rstrip(PADDING.decode('latin-1'))

# Load the dictionary file with explicit encoding
with open('words.txt', 'r', encoding='utf-8') as file:
    dictionary = [line.strip() for line in file]


for secret in dictionary:
    if secret[-1:] == "\n":
        print("Error, new line character at the end of the string. This will not match!")
    elif len(secret.encode('utf-8')) >= 32:
        print("Error, string too long. Must be less than 32 bytes.")
    else:
        # create a key using the secret
        key = secret.encode('utf-8') + (BLOCK_SIZE - len(secret.encode('utf-8')) % BLOCK_SIZE) * PADDING

        # decode the encoded string
        decoded = decode_aes(key, encrypted)

        if decoded.startswith('FLAG:'):
            print("\n")
            print("Success: "+secret+"\n")
            print(decoded+"\n")
            break  # Exit the loop if the correct password is found
        else:
            print(f'Wrong password: {secret}')

print("Finished trying all passwords.")
